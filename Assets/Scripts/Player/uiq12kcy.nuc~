using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class PlayerController : MonoBehaviour
{
    public float Speed = 6;
    public float SprintSpeed = 10;
    public float TurnSpeed = 15;
    public float JumpHeight = 10f;
    private float gravityValue = -9.81f;

    public Transform CameraLookAt;

    public Cinemachine.AxisState XAxis;
    public Cinemachine.AxisState YAxis;

    CharacterController characterController;

    Camera mainCamera;
    Animator animator;
    Vector3 velocity;
    bool groundedPlayer = false;

    RayCastWeapon currentWeapon;

    // Start is called before the first frame update
    void Start()
    {
        Cursor.visible = false;
        Cursor.lockState = CursorLockMode.Locked;

        mainCamera = Camera.main;

        animator = GetComponent<Animator>();
        characterController = GetComponent<CharacterController>();
        currentWeapon = GetComponentInChildren<RayCastWeapon>();
    }

    // Update is called once per frame
    void Update()
    {
        if (!groundedPlayer)
        {
            groundedPlayer = characterController.isGrounded;
        }

        PlayerMovement();
        PlayerLook();

        if(Input.GetMouseButtonDown(0))
        {
            currentWeapon.ShootGun();
        }
    }

    void PlayerLook()
    {
        XAxis.Update(Time.deltaTime);
        YAxis.Update(Time.deltaTime);

        CameraLookAt.eulerAngles = new Vector3(YAxis.Value, XAxis.Value, 0);

        float yawCamera = mainCamera.transform.rotation.eulerAngles.y;
        transform.rotation = Quaternion.Slerp(transform.rotation, Quaternion.Euler(0, yawCamera, 0), TurnSpeed * Time.deltaTime);
    }

    void PlayerMovement()
    {
        var hor = Input.GetAxis("Horizontal");
        var ver = Input.GetAxis("Vertical");

        animator.SetFloat("InputX", hor);
        animator.SetFloat("InputY", ver);

        if (Input.GetKey(KeyCode.LeftShift) && ver > 0)
        {
            animator.SetBool("Sprinting", true);
            velocity.x = hor * SprintSpeed;
            velocity.z = ver * SprintSpeed;
        }
        else
        {
            animator.SetBool("Sprinting", false);
            velocity.x = hor * Speed;
            velocity.z = ver * Speed;
        }

        if (characterController.isGrounded)
        {
            if (Input.GetKeyDown(KeyCode.Space))
            {
                velocity.y = JumpHeight;
            }
        }
        

        velocity.y += gravityValue * Time.deltaTime;
        velocity = transform.TransformDirection(velocity);
        
        characterController.Move(velocity * Time.deltaTime);
    }
}
